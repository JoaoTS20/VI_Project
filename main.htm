
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
	<script src="https://d3js.org/d3.v6.min.js"></script>
    <!-- <script src="https://bundle.run/geojson-rewind@0.3.1"></script> -->
    </script>

</head>
<body>
    <!--script>
        console.log("Aqui")
        d3.csv("/dataset/movies_metadata.csv", function(data) {
            console.log(data.original_title);
        });
    </script-->

    <div id="my_dataviz"></div>
    <script>
        // set the dimensions and margins of the graph
        const margin = {top: 10, right: 30, bottom: 30, left: 100},
            width = 500 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        const svg = d3.select("#my_dataviz")
        .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
        .append("g")
            .attr("transform",
                `translate(${margin.left}, ${margin.top})`);

        //Read the data
        d3.csv("/dataset/movies_metadata.csv").then( function(data) {
        // Add X axis
        const x = d3.scaleLinear()
            .domain([0, 600])
            .range([ 0, width ]);
        svg.append("g")
            .attr("transform", `translate(0, ${height})`)
            .call(d3.axisBottom(x));

        // Add Y axis
        const y = d3.scaleLinear()
            .domain([0, 500000000])
            .range([ height, 0]);
        svg.append("g")
            .call(d3.axisLeft(y));

        // Add a tooltip div. Here I define the general feature of the tooltip: stuff that do not depend on the data point.
        // Its opacity is set to 0: we don't see it by default.
        const tooltip = d3.select("#my_dataviz")
            .append("div")
            .style("opacity", 0)
            .attr("class", "tooltip")
            .style("background-color", "white")
            .style("border", "solid")
            .style("border-width", "1px")
            .style("border-radius", "5px")
            .style("padding", "10px")



        // A function that change this tooltip when the user hover a point.
        // Its opacity is set to 1: we can now see it. Plus it set the text and position of tooltip depending on the datapoint (d)
        const mouseover = function(event, d) {
            tooltip
            .style("opacity", 1)
        }

        const mousemove = function(event, d) {
            tooltip
            .html(`${d.original_title}\nPopularity Score: ${d.popularity} \nBudget:${d.budget} `)
            .style("left", (event.x) + "px") // It is important to put the +90: other wise the tooltip is exactly where the point is an it creates a weird effect
            .style("top", (event.y) + "px")
        }

        // A function that change this tooltip when the leaves a point: just need to set opacity to 0 again
        const mouseleave = function(event,d) {
            tooltip
            .transition()
            .duration(200)
            .style("opacity", 0)
        }

        // Add dots
        svg.append('g')
            .selectAll("dot")
            //.data(data)
            .data(data.filter(function(d,i){return i<300}))
            .enter()
            .append("circle")
            .attr("cx", function (d) { return x(parseFloat(d.popularity)); } )
            .attr("cy", function (d) { return y(parseInt(d.budget) ); } )
            .attr("r", 1.5)
            .style("fill", "#69b3a2")
            //.style("opacity", 0.3)
            //.style("stroke", "white")
            .on("mouseover", mouseover )
            .on("mousemove", mousemove )
            .on("mouseleave", mouseleave )
            
        })

    </script>
</body>
</html>
