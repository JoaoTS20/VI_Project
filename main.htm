<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
	<script src="https://d3js.org/d3.v6.min.js"></script>
    <!-- <script src="https://bundle.run/geojson-rewind@0.3.1"></script> -->
    </script>
    <link rel="stylesheet" href="style.css">
</head>
<body>

    <div class="container">
        <h2>Budget By Popularity in Movies</h2>
        <div class="graph" id="my_dataviz"></div>
        <div id="divtooltip"></div>
        <div class="filters">
            <label for="exampleFormControlTextarea1" class="form-label">Filter By Studio</label>
            <input id="txtStudio" name="txt-Name" class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
            <button id="btsearch" class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
        </div>
    </div>
    <script>
        // set the dimensions and margins of the graph
        const margin = {top: 10, right: 30, bottom: 40, left: 100},
            width = 500 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;
        const tooltip = d3.select("#divtooltip")
          .style("opacity", 0)
          .attr("class", "tooltip")
          .style("background-color", "white")
          .style("border", "solid")
          .style("border-width", "1px")
          .style("border-radius", "5px")
          .style("padding", "10px")
                  // append the svg object to the body of the page
        let svg = d3.select("#my_dataviz")
            .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
            .append("g")
                .attr("transform",
                    `translate(${margin.left}, ${margin.top})`);
        

        
        //Read the data
        d3.csv("dataset.csv").then( function(data) {
          // Add X axis
          var x = d3.scaleLinear()
              .domain([0, d3.max(data, function(d){ return (parseFloat(d.popularity))})])
              .range([ 0, width ]);
          var xAxis = svg.append("g")
              .attr("transform", `translate(0, ${height})`)
              .call(d3.axisBottom(x));

          // Add Y axis
          var y = d3.scaleLinear()
              .domain([0, d3.max(data, function(d){ return parseFloat(d.budget)})])
              .range([ height, 0]);
          var yAxis= svg.append("g")
              .call(d3.axisLeft(y));
          
          generateGraph(data,svg,x,y,xAxis,yAxis)
            // X axis label:
            svg.append("text")
                .attr("text-anchor", "end")
                .attr("x", width/2 + margin.left -25)
                .attr("y", height + margin.top + 25)
                .text("Popularity Score");

            // Y axis label:
            svg.append("text")
                .attr("text-anchor", "end")
                .attr("transform", "rotate(-90)")
                .attr("y", -margin.left + 20)
                .attr("x", -margin.top - height/2 + 20)
                .text("Budget")

            d3.select("button").on("click", function() {
                studio = d3.select("#txtStudio").node().value;
                newData = data.filter(function(d){ return  eval(d.production_companies).includes(studio)})
                if (newData.length==0){
                    newData = data
                    console.log("empthy")
                }

                // Update X axis
                x.domain([0, d3.max(newData, function(d){ return (parseFloat(d.popularity))})])
                xAxis.transition().duration(1000).call(d3.axisBottom(x))
                
                // Update Y axis
                y.domain([0, d3.max(newData, function(d){ return parseFloat(d.budget)})])
                yAxis.transition().duration(1000).call(d3.axisLeft(y));
                
                svg.selectAll("circle").transition().duration(750).remove();
                generateGraph(newData,svg,x,y,xAxis,yAxis)

                console.log(newData)

            })

        })
    function generateGraph(data,svg,x,y,xAxis,yAxis){

      console.log(data)
      
      const mouseover = function(event, d) {
          tooltip
          .style("opacity", 1)
      }

      const mousemove = function(event, d) {
          tooltip
          .html(`${d.original_title} <br> Popularity Score: ${d.popularity} <br> Budget: ${d.budget} $`)
          .style("left", (event.x)+5 + "px") // It is important to put the +90: other wise the tooltip is exactly where the point is an it creates a weird effect
          .style("top", (event.y) + "px")
          .style("position","absolute")
      }

      // A function that change this tooltip when the leaves a point: just need to set opacity to 0 again
      const mouseleave = function(event,d) {
          tooltip
          .transition()
          .duration(200)
          .style("opacity", 0)
      }

      
      // Add dots
      svg.append('g')
          .selectAll("dot")
          .data(data)
          .enter()
          .append("circle")
          .attr("cx", function (d) { return x(parseFloat(d.popularity)); } )
          .attr("cy", function (d) { return y(parseFloat(d.budget) ); } )
          .attr("r", 3,5)
          .style("fill", "red")
          .style("opacity", 0.3)
          .style("stroke", "white")
          .on("mouseover", mouseover )
          .on("mousemove", mousemove )
          .on("mouseleave", mouseleave )

    }
    </script>
    
</body>
</html>
